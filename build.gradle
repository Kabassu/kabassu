/*
 *   Copyright (C) 2018 Kabassu
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 */

plugins {
    id "org.sonarqube" version "2.7"
  //  id "com.github.johnrengelman.shadow" version "5.1.0" apply false
    id 'jacoco'
}

def verAll = '0.2.0-SNAPSHOT'

description = "Kabassu"
defaultTasks = ['clean', 'build', 'prepareRunningInstance']

apply plugin: 'org.sonarqube'

allprojects {
    apply plugin: "eclipse"
    apply plugin: "idea"
    apply plugin: 'jacoco'
    version verAll

    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        maven { url 'https://repo.gradle.org/gradle/libs-releases' }

    }

}

subprojects {
    apply plugin: 'java'

    //apply plugin: 'com.github.johnrengelman.shadow'

    sourceCompatibility = '12'
    targetCompatibility = '12'

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }

    tasks.withType(Jar) {
       // destinationDir = file("$rootDir/build/libs")
    }

    clean.doLast {
        file("$rootDir/build").deleteDir()
    }

    dependencies {
        testImplementation("org.junit.jupiter:junit-jupiter-api:5.5.1",
                group: 'org.hamcrest', name: 'hamcrest-junit', version: '2.0.0.0',
                'io.vertx:vertx-unit:3.8.0',
                'io.vertx:vertx-junit5:3.8.0',
                'org.junit.jupiter:junit-jupiter-engine:5.5.1',
                'org.junit.platform:junit-platform-launcher:1.5.1',
                'org.junit.platform:junit-platform-runner:1.5.1')
        testImplementation group: 'io.vertx', name: 'vertx-core', version: '3.8.0'
        testImplementation group: 'io.vertx', name: 'vertx-rx-java2', version: '3.8.0'
        testImplementation 'org.awaitility:awaitility:3.0.0'
        testImplementation group: 'commons-io', name: 'commons-io', version: '2.6'
        testCompile project(path: ':kabassu-commons')


    }

    jar.enabled = true
    build.dependsOn(jar);

    test {

        useJUnitPlatform()

        beforeTest { descriptor ->
            logger.lifecycle("Running test: " + descriptor)
        }

        onOutput { descriptor, event ->
            logger.lifecycle("Test: " + descriptor + " produced standard out/err: " + event.message )
        }
    }

    sonarqube {
        properties {
            property 'sonar.java.source', sourceCompatibility
        }
    }

    tasks.withType(Test) {
        jacoco {
            destinationFile = file("$rootProject.buildDir/jacoco/test.exec")
        }
    }

}

sonarqube {
    properties {
        property 'sonar.projectKey', 'io.kabassu'
        property 'sonar.projectName', 'Kabassu'
        property 'sonar.projectVersion', '0.0.1-SNAPSHOT'

        property 'sonar.links.homepage', 'kabassu.io'
        property 'sonar.links.ci', 'https://travis-ci.org/Kabassu/kabassu'
        property 'sonar.links.scm', 'https://github.com/Kabassu/kabassu'
        property 'sonar.links.issue', 'https://github.com/Kabassu/kabassu/issues'
    }
}

task aggregatedJavadocs(type: Javadoc, description: 'Generate javadocs from all child projects as if it was a single project', group: 'Documentation') {
    destinationDir = file("$buildDir/docs/javadoc")
    destinationDir.delete()
    title = "$project.name $version API"
    options.author true
    options.links 'https://docs.oracle.com/en/java/javase/12/docs/api/'
    options.addStringOption 'Xdoclint:none', '-quiet'

    subprojects.each { proj ->
        proj.tasks.withType(Javadoc).each { javadocTask ->
            source += javadocTask.source
            classpath += javadocTask.classpath
            excludes += javadocTask.excludes
            includes += javadocTask.includes
        }
    }
}

task copyConfiguration(type: Copy) {
    from 'configuration'
    into 'build/dist'
}

task copyStarters(type: Copy) {
    from 'starters'
    into 'build/dist'
}

task cleanJacoco(dependsOn: 'clean') {  delete "$buildDir/jacoco" }

task prepareRunningInstance {
}

configurations {
    deps
}

dependencies {
    deps project(':kabassu-manager')
    deps project(':kabassu-commons')
    deps project(':kabassu-server')
    deps project(':kabassu-mongo')
    deps project(':kabassu-test-dispatcher')
    deps project(':kabassu-suite-dispatcher')
    deps project(':kabassu-runner-gradle')
    deps project(':kabassu-test-context')
    deps project(':kabassu-test-rerun')
    deps project(':kabassu-suite-rerun')
    deps project(':kabassu-results-dispatcher')
    deps project(':kabassu-results-retriever-main')
    deps project(':kabassu-results-server')
    deps project(':kabassu-files-retriever')

}

task downloadDeps(type: Copy) {
    from configurations.deps
    into "build/dist/libs"
}

task assembleDistributionWithDeps(type: Zip) {
    from 'build/dist/'
    destinationDir  file("distribution")
    archiveName "kabassu.${verAll}.zip"
}

prepareRunningInstance.dependsOn copyStarters
prepareRunningInstance.dependsOn copyConfiguration
prepareRunningInstance.dependsOn downloadDeps
prepareRunningInstance.finalizedBy assembleDistributionWithDeps

