/*

        Copyright (C) 2018 Kabassu

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
        You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

buildscript {
    apply from: "$rootProject.projectDir/buildscript.gradle", to: buildscript
}

description = "Kabassu"
defaultTasks = ['build_module','prepareRunningInstance']


allprojects {
    version '0.0.1-SNAPSHOT'

    apply plugin: "eclipse"
    apply plugin: "idea"

    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
    }
}

subprojects {
    apply plugin: 'java'
    targetCompatibility = 1.8
    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }

    tasks.withType(Jar) {
        destinationDir = file("$rootDir/build/libs")
    }

    clean.doLast {
        file("$rootDir/build").deleteDir()
    }

    plugins.withId 'com.github.johnrengelman.shadow', {
        shadowJar {
            classifier = 'fat'
        }
    }

}

task aggregatedJavadocs(type: Javadoc, description: 'Generate javadocs from all child projects as if it was a single project', group: 'Documentation') {
    destinationDir = file("$buildDir/docs/javadoc")
    destinationDir.delete()
    title = "$project.name $version API"
    options.author true
    options.links 'http://docs.oracle.com/javase/8/docs/api/', 'http://vertx.io/docs/apidocs'
    options.addStringOption 'Xdoclint:none', '-quiet'

    subprojects.each { proj ->
        proj.tasks.withType(Javadoc).each { javadocTask ->
            source += javadocTask.source
            classpath += javadocTask.classpath
            excludes += javadocTask.excludes
            includes += javadocTask.includes
        }
    }
}

task copyConfiguration(type: Copy) {
    from 'configuration'
    into 'build'
}

task copyStarters(type: Copy) {
    from 'starters'
    into 'build'
}

task prepareRunningInstance {
}

prepareRunningInstance.dependsOn copyStarters
prepareRunningInstance.dependsOn copyConfiguration
